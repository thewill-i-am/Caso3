# -*- coding: utf-8 -*-
"""Caso #3 - 2021-II BCD7214 Administración de datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2RiSS_4rsvfCnEtsfzhFPQBPxoS7OEh

# Caso #3 - 2021-II BCD7214 Administración de datos
## Estudiantes: <font color='green'>Aguilar, William. & Vargas, Rachit.

<img src=https://biblioteca.ulead.ac.cr/sites/default/files/LEAD%20color.png  width="220"></img>



---
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/data.csv', sep=';', error_bad_lines=False)
df.columns = df.columns.str.lower().str.replace(' ', '_')

class Analisis_Data():

  """ Se crea una clase para poder manejar los comandos de manera mas efectiva y rapida, a la vez que se reuti -
  liza el codigo normalmente repetitivo """
  
  def __init__(self, datos):
    self.__datos = datos
  
  @property 
  def datos(self):
    return self.__datos

  @datos.setter
  def datos(self, datos):
    self.__datos = datos
  
  def head(self, cantidad_registros=5): 
    return self.__datos.head(cantidad_registros)

  def tail(self, cantidad_registros=5):
    return self.__datos.tail(cantidad_registros)

  def delete_column_dinamic(self, percent_up=0.9):
    columns = self.__datos.columns
    i = 0
    for col in columns:
      valor = np.mean(self.__datos[col].isnull()[i])
      if valor >= percent_up:
        del self.__datos[col]
      i+=1;

  def delete_column(self, col_del): # ESTE COMANDO ELIMINA LA COLUMNA QUE QUERAMOS DE MODO MANUAL
    del self.__datos[col_del]

  def data_types(self):
    print('TIPOS DE DATOS POR COLUMNA:\n')
    return self.__datos.dtypes

  def __display_data_null(self):
    plt.figure(figsize=(10,5), dpi=100)
    sns.heatmap(self.__datos.isnull(), cbar=False, cmap='OrRd')
    plt.gca().update(dict(title='Null values - Heatmap', xlabel='Variables', ylabel='Index'))
    plt.show()

  def data_null(self):
    self.__display_data_null()
    print('VALORES NULOS POR COLUMNAS:\n')
    print(self.__datos.isnull().sum())
  
  def data_null_percent(self):
    return np.mean(self.__datos.isnull()*100)
  
  def replace_values(self, to_replace, value, columns=[]):
    self.__datos[columns] = self.__datos[columns].replace(to_replace, value)
  
  def del_row_null(self, thresh=3):
    self.__datos = self.__datos.dropna(thresh=thresh)
  
  def save_csv(self, file_name='data.csv', index=False):
    self.__datos.to_csv(file_name, index=index)
  
analisis = Analisis_Data(df) # INSTANCIA DE LA CLASE CREADA

"""### Mostrando los primeros 5 registros del dataframe"""

analisis.head(cantidad_registros=5)

"""### Mostrando los últimos 5 registros del dataframe"""

analisis.tail(cantidad_registros=5)

"""### Mostrando los tipos de datos por columna"""

analisis.data_types()

"""### Mostrando valores nulos por columnas"""

analisis.data_null()

"""### Mostrando valores nulos por columnas en %"""

analisis.data_null_percent()

"""### Eliminando los datos con valores nulos arriba o igual al 70%"""

analisis.delete_column_dinamic(percent_up=0.7)
analisis.head(cantidad_registros=5)

"""### Eliminando las filas con elementos menores o igual a 2"""

print('Dimensiones sin la eliminacion de las filas: ' + str(analisis.datos.shape))
analisis.del_row_null(thresh=2)
print('Dimensiones con la eliminacion de las filas:' + str(analisis.datos.shape))

"""### Remplazando los String "--" por valores nulos"""

columnas = analisis.datos.columns
analisis.replace_values('--', np.nan, columnas)
analisis.head(cantidad_registros=5)

"""### Remplazando los valores nulos de la variable <font color='blue'>Gender</font> por U

"""

columna = ['gender']
analisis.replace_values(np.nan, 'U', columna)
analisis.datos.gender.unique()

"""### Remplazando los valores nulos de la variable <font color='blue'>Departamento</font> por Bench"""

columna2 = ['department']
analisis.replace_values(np.nan, 'Bench', columna2)
analisis.datos.department.unique()

"""### Remplazando los valores nulos de la variable <font color='blue'>hourlyrate</font> por la media"""

""" En este fragmento de codigo estamos cambiando la variable hourlyrate a tipo de dato numerico y nos estamos ayudando de una variable 
    llamada temp (temporal) """
                      
temp = analisis.datos
temp.hourlyrate = pd.to_numeric(temp.hourlyrate)
analisis.datos = temp

columna3 = ['hourlyrate']
analisis.replace_values(np.nan, analisis.datos.hourlyrate.median(), columna3)
analisis.datos.isnull().sum()

"""### Reemplazando los valores perdidos inesperados de la columna <font color='blue'>“Overtime”</font> por No"""

columna4 = ['overtime']
analisis.replace_values(to_replace=['0', '1'], value=np.nan, columns=columna4) #PRIMERO PASO LOS VALORES 1 Y 0 A NULOS
analisis.replace_values(to_replace=np.nan, value="No", columns=columna4) #LUEGO LOS VALORES NULOS LOS PASO A NO
analisis.datos.overtime.unique()

"""### Guardando el DataFrame en formato .csv"""

analisis.save_csv(file_name='processed_data.csv', index=False)